"""
Migration pour ajouter les champs d'abonnement et de validation admin au mod√®le User
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from flask import Flask
from flask_sqlalchemy import SQLAlchemy

# Configuration temporaire pour la migration
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///classe_numerique.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

def upgrade_database():
    """Ajouter les nouveaux champs d'abonnement √† la table user"""
    
    # Cr√©er les nouvelles colonnes
    try:
        # Syst√®me d'inscription payante et validation admin
        db.engine.execute("""
            ALTER TABLE user ADD COLUMN subscription_status VARCHAR(20) DEFAULT 'pending';
        """)
        print("‚úÖ Colonne subscription_status ajout√©e")
        
        db.engine.execute("""
            ALTER TABLE user ADD COLUMN subscription_type VARCHAR(20);
        """)
        print("‚úÖ Colonne subscription_type ajout√©e")
        
        db.engine.execute("""
            ALTER TABLE user ADD COLUMN subscription_amount FLOAT;
        """)
        print("‚úÖ Colonne subscription_amount ajout√©e")
        
        db.engine.execute("""
            ALTER TABLE user ADD COLUMN payment_date DATETIME;
        """)
        print("‚úÖ Colonne payment_date ajout√©e")
        
        db.engine.execute("""
            ALTER TABLE user ADD COLUMN payment_reference VARCHAR(100);
        """)
        print("‚úÖ Colonne payment_reference ajout√©e")
        
        db.engine.execute("""
            ALTER TABLE user ADD COLUMN approval_date DATETIME;
        """)
        print("‚úÖ Colonne approval_date ajout√©e")
        
        db.engine.execute("""
            ALTER TABLE user ADD COLUMN approved_by INTEGER;
        """)
        print("‚úÖ Colonne approved_by ajout√©e")
        
        db.engine.execute("""
            ALTER TABLE user ADD COLUMN subscription_expires DATETIME;
        """)
        print("‚úÖ Colonne subscription_expires ajout√©e")
        
        db.engine.execute("""
            ALTER TABLE user ADD COLUMN rejection_reason TEXT;
        """)
        print("‚úÖ Colonne rejection_reason ajout√©e")
        
        db.engine.execute("""
            ALTER TABLE user ADD COLUMN notes TEXT;
        """)
        print("‚úÖ Colonne notes ajout√©e")
        
        # Mettre √† jour les utilisateurs existants
        # Les admins sont automatiquement approuv√©s
        db.engine.execute("""
            UPDATE user SET subscription_status = 'approved' WHERE role = 'admin';
        """)
        print("‚úÖ Statut des admins mis √† jour")
        
        # Les enseignants existants sont mis en statut 'approved' pour la transition
        db.engine.execute("""
            UPDATE user SET 
                subscription_status = 'approved',
                subscription_type = 'teacher',
                subscription_amount = 40.0,
                approval_date = datetime('now')
            WHERE role = 'teacher';
        """)
        print("‚úÖ Statut des enseignants existants mis √† jour")
        
        # Les √©tudiants gardent le statut par d√©faut
        print("‚úÖ Migration termin√©e avec succ√®s !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration : {str(e)}")
        raise e

if __name__ == "__main__":
    print("üöÄ D√©marrage de la migration des champs d'abonnement...")
    with app.app_context():
        upgrade_database()
